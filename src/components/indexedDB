const dbName = 'myDatabase';
const storeName = 'users';

async function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(dbName, 1);

    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains(storeName)) {
        db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });
      }
    };

    request.onsuccess = () => {
      resolve(request.result);
    };

    request.onerror = () => {
      reject(request.error);
    };
  });
}

export async function addUser(user) {
  const database = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = database.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);

    // Ensure the object is plain and serializable
    const userToAdd = {
      name: user.name,
      surname: user.surname
    };

    const request = store.add(userToAdd);

    request.onsuccess = () => {
      resolve(request.result);
    };

    request.onerror = (event) => {
      console.error('Failed to add user:', event.target.error);
      reject(event.target.error);
    };
  });
}

export async function getAllRecords() {
  const database = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = database.transaction(storeName, 'readonly');
    const store = transaction.objectStore(storeName);
    const request = store.getAll();

    request.onsuccess = () => {
      resolve(request.result);
    };

    request.onerror = (event) => {
      console.error('Failed to fetch records:', event.target.error);
      reject(event.target.error);
    };
  });
}

export async function updateRecord(id, updatedUser) {
  const database = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = database.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);

    const request = store.get(id);

    request.onsuccess = () => {
      const user = request.result;
      if (user) {
        Object.assign(user, updatedUser);
        const updateRequest = store.put(user);

        updateRequest.onsuccess = () => {
          resolve(updateRequest.result);
        };

        updateRequest.onerror = (event) => {
          console.error('Failed to update record:', event.target.error);
          reject(event.target.error);
        };
      } else {
        reject(new Error('Record not found'));
      }
    };

    request.onerror = (event) => {
      console.error('Failed to fetch record for update:', event.target.error);
      reject(event.target.error);
    };
  });
}

export async function deleteRecord(id) {
  const database = await openDB();
  return new Promise((resolve, reject) => {
    const transaction = database.transaction(storeName, 'readwrite');
    const store = transaction.objectStore(storeName);
    const request = store.delete(id);

    request.onsuccess = () => {
      resolve(id);
    };

    request.onerror = (event) => {
      console.error('Failed to delete record:', event.target.error);
      reject(event.target.error);
    };
  });
}
